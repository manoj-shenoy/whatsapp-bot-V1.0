{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d877031c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# =================SENDING HIGHEST DELIVERY DATA INFO ON WHATSAPP- TEST SCRIPT=================================\n",
    "\n",
    "# !pip install pywhatkit\n",
    "\n",
    "\n",
    "import pywhatkit as kit\n",
    "from nsepy import get_history\n",
    "from datetime import date, datetime\n",
    "import pandas as pd,time as tt\n",
    "from dateutil.relativedelta import relativedelta\n",
    "# import concurrent.futures,multiprocessing\n",
    "from nsepython import *\n",
    "from nsetools import *\n",
    "from tqdm import tqdm\n",
    "import schedule\n",
    "from functools import lru_cache\n",
    "\n",
    "# warnings.filterwarnings('ignore')\n",
    "\n",
    "months = 12\n",
    "fno_stocks= ['HDFCAMC', 'ESCORTS', 'HONAUT', 'APOLLOTYRE', 'ICICIGI', 'HDFCLIFE',\n",
    "             'ADANIPORTS', 'BOSCHLTD', 'MOTHERSON', 'IEX', 'HINDPETRO', 'ADANIENT',\n",
    "             'MRF', 'EICHERMOT', 'BPCL', 'ABB', 'MGL', 'BANDHANBNK', 'AMBUJACEM',\n",
    "             'MARUTI', 'ICICIPRULI', 'INTELLECT', 'EXIDEIND', 'MCDOWELL-N', \n",
    "             'BATAINDIA', 'ZYDUSLIFE', 'GODREJCP', 'GAIL', 'CONCOR', 'TVSMOTOR',\n",
    "             'SIEMENS', 'INDIAMART', 'MFSL', 'TATAMOTORS', 'CANFINHOME',\n",
    "             'IBULHSGFIN', 'TORNTPHARM', 'INDIGO', 'SRF', 'IOC', 'ABCAPITAL',\n",
    "             'TATAPOWER', 'ASIANPAINT', 'PIDILITIND', 'IGL', 'DEEPAKNTR', 'LAURUSLABS',\n",
    "             'HEROMOTOCO', 'SUNTV', 'TATACONSUM', 'HINDUNILVR', 'ACC',\n",
    "             'ABBOTINDIA', 'BIOCON', 'OBEROIRLTY', 'NAM-INDIA', 'DIXON', 'BHEL',\n",
    "             'PETRONET', 'JUBLFOOD', 'IDEA', 'AMARAJABAT', 'AARTIIND', 'SBILIFE',\n",
    "             'TRENT', 'GRANULES', 'DLF', 'ASHOKLEY', 'LICHSGFIN', 'SAIL', 'ULTRACEMCO',\n",
    "             'AUBANK', 'BALKRISIND', 'JINDALSTEL', 'GNFC', 'INDHOTEL', 'DALBHARAT',\n",
    "             'POLYCAB', 'GMRINFRA', 'BAJAJ-AUTO', 'PAGEIND', 'VOLTAS', 'HDFC', 'ASTRAL', 'PIIND', 'LALPATHLAB', 'HDFCBANK', 'SHREECEM', 'HAL', 'FSL', 'TECHM', 'ATUL', 'BAJAJFINSV', 'CUMMINSIND', 'BEL', 'RAMCOCEM', 'DRREDDY', 'RELIANCE', 'CIPLA', 'ICICIBANK', 'TITAN', 'PNB', 'BERGEPAINT', 'BRITANNIA', 'COFORGE', 'APOLLOHOSP', 'NESTLEIND', 'ITC', 'BALRAMCHIN', 'SBICARD', 'CUB', 'UBL', 'GODREJPROP', 'CANBK', 'SYNGENE', 'LTTS', 'CHOLAFIN', 'COROMANDEL', 'HINDCOPPER', 'DIVISLAB', 'COLPAL', 'COALINDIA', 'ONGC', 'POWERGRID', 'DELTACORP', 'MARICO', 'WHIRLPOOL', 'TORNTPOWER', 'GUJGASLTD', 'AXISBANK', 'TATACHEM', 'TATASTEEL', 'PERSISTENT', 'VEDL', 'HAVELLS', 'WIPRO', 'HCLTECH', 'PEL', 'RECLTD', 'INDUSINDBK', 'NMDC', 'IRCTC', 'LT', 'NTPC', 'KOTAKBANK', 'JKCEMENT', 'SUNPHARMA', 'INFY', 'IPCALAB', 'GSPL', 'NAVINFLUOR', 'LUPIN', 'ALKEM', 'GLENMARK', 'IDFCFIRSTB', 'RBLBANK', 'ABFRL', 'NAUKRI', 'INDUSTOWER', 'UPL', 'MINDTREE', 'DABUR', 'TCS', 'BAJFINANCE', 'CROMPTON', 'SRTRANSFIN', 'CHAMBLFERT', 'FEDERALBNK', 'LTI', 'RAIN', 'MCX', 'PFC', 'INDIACEM', 'OFSS', 'SBIN', 'IDFC', 'BHARTIARTL', 'JSWSTEEL', 'MPHASIS', 'NATIONALUM', 'TATACOMM', 'BSOFT', 'BANKBARODA', 'BHARATFORG', 'AUROPHARMA', 'ZEEL','HINDALCO', 'GRASIM', 'METROPOLIS', 'MANAPPURAM', 'MUTHOOTFIN']\n",
    "\n",
    "\n",
    "startDate = date.today() - relativedelta(months=months)\n",
    "# startDate = datetime.fromtimestamp(datetime.timestamp(start))\n",
    "endDate = date.today()\n",
    "\n",
    "currMonthlyExpiry,nextMonthlyExpiry = expiry_list(\"RELIANCE\")[0],expiry_list(\"RELIANCE\")[1]\n",
    "farMonthlyExpiry = expiry_list(\"RELIANCE\")[2]\n",
    "\n",
    "currExpiryMonth,nextExpiryMonth,farExpiryMonth = currMonthlyExpiry[3:6],nextMonthlyExpiry[3:6],farMonthlyExpiry[3:6]\n",
    "currExpiryDate,nextExpiryDate,farExpiryDate = currMonthlyExpiry[0:-9],nextMonthlyExpiry[0:-9],farMonthlyExpiry[0:-9]\n",
    "currExpiryYear,nextExpiryYear,farExpiryYear = currMonthlyExpiry[7:],nextMonthlyExpiry[7:],farMonthlyExpiry[7:]\n",
    "\n",
    "@lru_cache\n",
    "def MonthToNum(ShortMonth):\n",
    "    return {\n",
    "            'Jan':1,'Feb':2,'Mar':3,'Apr': 4,'May': 5,'Jun': 6,\n",
    "            'Jul': 7,'Aug': 8,'Sep': 9,'Oct': 10,'Nov': 11,'Dec': 12}[ShortMonth]\n",
    "\n",
    "def FuturesOIData(symbol):\n",
    "    currMonthData = get_history(symbol=symbol,start=startDate,end=endDate,futures=True,\n",
    "                                expiry_date=date(int(currExpiryYear),\n",
    "                                                 MonthToNum(currExpiryMonth),int(currExpiryDate)))\n",
    "    nextMonthData = get_history(symbol=symbol,start=startDate,end=endDate,futures=True,\n",
    "                                expiry_date=date(int(nextExpiryYear),\n",
    "                                                 MonthToNum(nextExpiryMonth),int(nextExpiryDate)))\n",
    "    farMonthData = get_history(symbol=symbol,start=startDate,end=endDate,futures=True,\n",
    "                               expiry_date=date(int(farExpiryYear),\n",
    "                                                MonthToNum(farExpiryMonth),int(farExpiryDate)))\n",
    "    \n",
    "    currMonthData.columns = ['Symbol','Expiry','Open','High','Low','Close','Last',\n",
    "                           'Settl Price','Number of Contracts','Turnover','Open Interest',\n",
    "                           'Change in OI','Underlying']\n",
    "    nextMonthData.columns = ['Symbol','Expiry','Open','High','Low','Close','Last',\n",
    "                           'Settl Price','Number of Contracts','Turnover','Open Interest',\n",
    "                           'Change in OI','Underlying']\n",
    "    farMonthData.columns = ['Symbol','Expiry','Open','High','Low','Close','Last',\n",
    "                           'Settl Price','Number of Contracts','Turnover','Open Interest',\n",
    "                           'Change in OI','Underlying']\n",
    "    \n",
    "    return currMonthData, nextMonthData,farMonthData\n",
    "\n",
    "\n",
    "def oiPercChange(stock):\n",
    "#     for stock in fno_stocks:\n",
    "    currOIData,nextOIData = FuturesOIData(stock)[0],FuturesOIData(stock)[1]\n",
    "    farOIData = FuturesOIData(stock)[2]\n",
    "    compositeOIDf = currOIData.join(nextOIData,lsuffix='_curr',rsuffix='_next')\n",
    "    compositeOIDf['OI %Change'] = 0\n",
    "    for i in range(1,len(compositeOIDf)):\n",
    "        if (compositeOIDf['Open Interest_curr'].iloc[i-1] + compositeOIDf['Open Interest_next'].iloc[i-1]) == 0:\n",
    "            compositeOIDf['OI %Change'].iloc[i]= 0\n",
    "        else:\n",
    "            compositeOIDf['OI %Change'].iloc[i]=100*(compositeOIDf['Change in OI_curr'].iloc[i]+compositeOIDf['Change in OI_next'].iloc[i]\n",
    "                                                    )/(compositeOIDf['Open Interest_curr'].iloc[i-1]+compositeOIDf['Open Interest_next'].iloc[i-1])\n",
    "\n",
    "    oiPercChang = compositeOIDf[['Symbol_curr','Symbol_next','OI %Change']].iloc[-1:]\n",
    "#     print(oiPercChang)\n",
    "    return oiPercChang\n",
    "\n",
    "def topN_OI():\n",
    "    compDf = pd.DataFrame(columns=['Symbol_curr','Symbol_next','OI %Change'])\n",
    "    for stock in fno_stocks:\n",
    "        indoiPercChange = oiPercChange(stock)\n",
    "        compDf=pd.concat([compDf,indoiPercChange])\n",
    "#     compDf = pd.DataFrame(list_df)# columns= ['Symbol','Expiry','Open','High','Low','Close','Last',\n",
    "#                                             'Settl Price','Number of Contracts','Turnover',\n",
    "#                                             'Open Interest','Change in OI','Underlying'])\n",
    "#     print(compDf.head())\n",
    "    topNLargestOI = compDf.nlargest(10,'OI %Change')\n",
    "    topNSmallestOI = compDf.nsmallest(10,'OI %Change')\n",
    "    \n",
    "#     print(topNLargestOI)\n",
    "#     print(topNSmallestOI)\n",
    "    return topNLargestOI, topNSmallestOI\n",
    "    \n",
    "topN_OI()   \n",
    "\n",
    "phone = \"+919082417898\"\n",
    "\n",
    "@lru_cache\n",
    "def deliverydata(symbol):\n",
    "\n",
    "    data = get_history(symbol=symbol,start=startDate,\n",
    "                       end=endDate)\n",
    "#     PercDel = data[-30:]['%Deliverble'].astype(float)\n",
    "#     PercMaxDelivery=data.loc[PercDel.idxmax()]['%Deliverble']   \n",
    "\n",
    "    PercMaxDelivery = data[-30:]['%Deliverble'].max()\n",
    "    CurrPercDelivery = data['%Deliverble'].iloc[-1:]\n",
    "    \n",
    "    CurrVolume = data['Volume'].iloc[-1:]\n",
    "    data['20DAvgVol'] = data['Volume'].rolling(20).mean()\n",
    "    AvgVolume = data['20DAvgVol'].iloc[-1:]\n",
    "    RecentClose,prevHigh,prevLow = data['Close'].iloc[-1:],data['High'].iloc[-1:],data['Low'].iloc[-1:]\n",
    "    \n",
    "    data['VWAP_Avg']=data['VWAP'].rolling(20).mean()\n",
    "    VWAP_Avg = data['VWAP_Avg'].iloc[-1:]\n",
    "    \n",
    "    data['VWAP_50DAvg']=data['VWAP'].rolling(50).mean()\n",
    "    VWAP_50DAvg = data['VWAP_50DAvg'].iloc[-1:]\n",
    "    \n",
    "    data['VWAP_100DAvg']=data['VWAP'].rolling(100).mean()\n",
    "    VWAP_100DAvg = data['VWAP_100DAvg'].iloc[-1:]   \n",
    "    \n",
    "    \n",
    "#     if (data[-30:]['%Deliverble'].idxmax() == date.today()):        \n",
    "#         print(f'Todays %Delivery Data of {round(PercMaxDelivery,2)} for {symbol} is maximum in last 30 days')\n",
    "#         print(f'Max Perc Delivery for {symbol}-{round(PercMaxDelivery,2)}')\n",
    "#     else:\n",
    "#         print(f'Todays %Delivery Data for {symbol} : {round(PercMaxDelivery,2)} is not maximum  in last 30 days')\n",
    "        \n",
    "    return symbol,CurrPercDelivery,PercMaxDelivery,CurrVolume,AvgVolume,RecentClose,float(VWAP_Avg),float(VWAP_50DAvg),float(VWAP_100DAvg),float(prevHigh),float(prevLow)\n",
    "\n",
    "\n",
    "def HighestDelivery():\n",
    "    cols = ['Symbol','%Del','30D Max %Del','Vol(Lacs)',\n",
    "            '20D AvgVol(Lacs)','Close','20D AvgVWAP']#,'OI Perc Chg'\n",
    "    new_list = []\n",
    "    delivery = 0\n",
    "    for stock in range(len(fno_stocks)):\n",
    "        delivery = deliverydata(fno_stocks[stock])[1]\n",
    "        maxdelivery = deliverydata(fno_stocks[stock])[2]\n",
    "        currVolume = deliverydata(fno_stocks[stock])[3]\n",
    "        avgVolume = deliverydata(fno_stocks[stock])[4]\n",
    "        recentClose = deliverydata(fno_stocks[stock])[5]\n",
    "        VWAP_Avg = deliverydata(fno_stocks[stock])[6]\n",
    "        \n",
    "#         OIPercChange = FuturesOIData(fno_stocks[stock])\n",
    "        # Results from FuturesOIData Function\n",
    "        \n",
    "        \n",
    "        new_list.append([fno_stocks[stock],float(delivery)*100,float(maxdelivery)*100,\n",
    "                         round(float(currVolume/100000),0),round(float(avgVolume/100000),0),\n",
    "                        round(float(recentClose),2),round(float(VWAP_Avg),2)]) #,OIPercChange\n",
    "    df = pd.DataFrame(new_list, columns=cols)    \n",
    "    result = df[(df['%Del']==df['30D Max %Del']) & (df['Vol(Lacs)']>df['20D AvgVol(Lacs)'])]\n",
    "    print(result)\n",
    "#     print(df.nlargest(50, '%Del', keep='first'))\n",
    "    \n",
    "    return result\n",
    "\n",
    "\n",
    "\n",
    "def VolumeOI(symbol,threshold):\n",
    "    oi_data,ltp,crontime=oi_chain_builder(symbol,\"latest\",\"compact\")\n",
    "    \n",
    "    oi_data['CALLS_OI_0']=oi_data[(oi_data.CALLS_OI > 0)]['CALLS_OI']\n",
    "    oi_data['CallVolumeOIRatio']=oi_data['CALLS_Volume']/oi_data['CALLS_OI_0']\n",
    "    oi_data['PUTS_OI_0']=oi_data[(oi_data['PUTS_OI']) > 0]['PUTS_OI']\n",
    "    oi_data['PutVolumeOIRatio'] =oi_data['PUTS_Volume']/oi_data['PUTS_OI_0']\n",
    "    \n",
    "    filter = oi_data[(oi_data.CallVolumeOIRatio > threshold) | (oi_data.PutVolumeOIRatio> threshold)]\n",
    "#     StrikePrice,CallsVolume,CallsOI = filter['Strike Price'],filter['CALLS_Volume'],filter['CALLS_OI']    \n",
    "#     PutsVolume,PutsOI = filter['PUTS_Volume'],filter['PUTS_OI']\n",
    "#     CallVolumeOIRatio,PutVolumeOIRatio = filter['CallVolumeOIRatio'],filter['PutVolumeOIRatio']\n",
    "#     CallsLtp,PutsLtp = filter['CALLS_LTP'],filter['PUTS_LTP']\n",
    "    \n",
    "    filter_df = filter[['Strike Price','CALLS_Volume','CALLS_OI',\n",
    "                       'PUTS_Volume','PUTS_OI','CallVolumeOIRatio','PutVolumeOIRatio',\n",
    "                       'CALLS_LTP','PUTS_LTP']]\n",
    "\n",
    "    filter_df['Symbol'] = symbol    \n",
    "\n",
    "    print(filter_df)\n",
    "    return filter_df\n",
    "\n",
    "\n",
    "threshold = 5\n",
    "\n",
    "def VolumeOIScanner():\n",
    "    cols = ['Symbol','Strike Price','CALLS_Volume','CALLS_OI',\n",
    "            'PUTS_Volume','PUTS_OI','CallVolumeOIRatio','PutVolumeOIRatio',\n",
    "            'CALLS_LTP','PUTS_LTP']\n",
    "#     new_list = pd.DataFrame(columns=cols)\n",
    "    new_list=[]\n",
    "\n",
    "    for stock in range(len(fno_stocks)):\n",
    "        scan = VolumeOI(fno_stocks[stock],threshold=threshold)\n",
    "        \n",
    "        if (scan.empty == False):\n",
    "            new_list.append(scan)\n",
    "    df = pd.DataFrame([new_list])\n",
    "\n",
    "    print(df)\n",
    "    return df\n",
    "\n",
    "\n",
    "def sendWhatsappMsg():\n",
    "    kit.sendwhatmsg(phone,f'Whatsapp Message Bot\\n Highest Delivery Scrips with High Volume\\n {HighestDelivery()}\\n',19,30,32)\n",
    "    kit.sendwhatmsg(phone,f'Whatsapp Message Bot\\n Stocks with Highest OI%Change\\n {topN_OI()}\\n',19,30,32)\n",
    "    kit.sendwhatmsg(phone,f' Whatsapp Message Bot\\n Stock Options- Highest Vol/OI Ratio\\n  {VolumeOIScanner()}\\n',19,30,32)\n",
    "#     kit.sendwhatmsg(phone,f' Whatsapp Message Bot\\n Stock Options- Highest Vol/OI Ratio\\n  {VolumeOIScanner()}\\n',23,55,32)\n",
    "\n",
    "# print(sendWhatsappMsg())\n",
    "\n",
    "schedule.every().day.at(\"19:30\").do(sendWhatsappMsg)\n",
    "# schedule.every(10).seconds.do(sendWhatsappMsg)\n",
    "\n",
    "while True:\n",
    "    schedule.run_pending()\n",
    "    tt.sleep(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5bedf646",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
